// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// db.exec(`CREATE TABLE IF NOT EXISTS user (
//     id TEXT NOT NULL PRIMARY KEY,
//     username TEXT NOT NULL UNIQUE,
//     password TEXT NOT NULL
// )`);

// db.exec(`CREATE TABLE IF NOT EXISTS session (
//     id TEXT NOT NULL PRIMARY KEY,
//     expires_at INTEGER NOT NULL,
//     user_id TEXT NOT NULL,
//     FOREIGN KEY (user_id) REFERENCES user(id)
// )`);

// Define the User model
// model User {
//   id       String   @id @default(uuid()) // Primary key of type String, autogenerated with UUID
//   username String   @unique // Unique constraint on username
//   password String   // Password field
//   sessions Session[] // Define the sessions relation
// }

// Define the Session model
// model Session {
//   id         String   @id @default(uuid()) // Primary key of type String, autogenerated with UUID
//   expiresAt  DateTime // Field to store expiration time
//   userId     String   // Foreign key referencing User.id

//   user       User     @relation(fields: [userId], references: [id]) // Define the user relation
// }

// Define the User model
model User {
  id       String   @id // Primary key of type String, autogenerated with UUID
  username String   @unique // Unique constraint on username
  password String   // Password field
  sessions Session[] // Define the sessions relation
}


model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}